#!/usr/bin/env bash

# SPSP transfer-tool is developed and maintained by SIB. For more information, please contact spsp-support@sib.swiss

VERSION="1.9.0" # bumped to support spsp --help, spsp --version

# Define colors that are used in the help screen

ESC_SEQ="\033["
COL_CYAN=${ESC_SEQ}"0;36m"
COL_RED=${ESC_SEQ}"0;31m"
COL_GREY=${ESC_SEQ}"1;30m"
BACK_CYAN=${ESC_SEQ}"0;30;46m"
BACK_RED=${ESC_SEQ}"0;30;41m"
BACK_GREEN=${ESC_SEQ}"0;30;42m"
COL_RESET=${ESC_SEQ}"39;49;00m"

# Define the UID of the recipient for GPG encryption
RECIPIENT="spsp-support@sib.swiss"

# Check for the machine compatibility
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
Linux*) MACHINE=linux ;;
Darwin*) MACHINE=mac ;;
*) MACHINE="UNKNOWN" ;;
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
  echo "Unsupported system type"
  echo "System must be a Macintosh or Linux"
  echo ""
  echo "System detection determined via uname command"
  echo "If the following is empty, could not find uname command: $(uname -v)"
  echo "Your reported uname is: $(uname -s)"
fi

# Set environment variables for dev
if [ "$MACHINE" == "linux" ]; then
  SHACMD="sha256sum"
elif [ "$MACHINE" == "mac" ]; then
  SHACMD="shasum -a 256"
fi

showVersion() {
  intro="üîê${COL_GREEN}  SPSP transfer-tool${COL_RESET}\n"
  intro="$intro    ${COL_CYAN}Version ${VERSION}\n${COL_RESET}"

  printf "$intro"
}

showHelp() {

  showVersion

  usage="${COL_LYELLOW}Usage:\n${COL_RESET}"
  usage="$usage  ./spsp <cmd> <options>"

  commands="${COL_LYELLOW}Commands:\n${COL_RESET}"
  commands="$commands  auto                        Automatically run the commands to Compress, Hash, Encrypt & Transfer, add --no-archive option to delete the files after the transfer\n"
  commands="$commands  help                        Shows help screen\n"
  commands="$commands  test                        Fake run with fake generated files\n"
  commands="$commands  cleanup                     Clean the following directories: logs, sent, viruses, bacteria and .outbox\n"

  options="${COL_LYELLOW}Options:\n${COL_RESET}"
  options="$options --help, -h                   Shows Help (this screen)\n"
  options="$options --version, -V, version       Show Version\n"
  options="$options --without-env, -W            Use environment variables from the system and the .env file\n"

  examples="${COL_LYELLOW}Examples:\n${COL_RESET}"
  examples="$examples  ${COL_CYAN}$ ./spsp auto${COL_RESET}\n"
  examples="$examples  ${COL_CYAN}$ ./spsp test${COL_RESET}\n"
  examples="$examples  ${COL_CYAN}$ ./spsp cleanup${COL_RESET}\n"

  printf "\n"
  printf "$usage\n\n"
  printf "$commands\n"
  printf "$options\n"
  printf "$examples\n"

}

compressFolder() {
  tar -czf $1.tar.gz $1
}

hashFile() {
  $SHACMD "$1" >"$1".sha256
}

encryptFile() {
  gpg -q --batch --yes --always-trust -o "$1".gpg -e -r $RECIPIENT "$1"
}

cleanup() {
  OUTBOX=".outbox"
  LOGS="logs"
  SENT="sent"
  VIRUSES="viruses"
  BACTERIA="bacteria"
  BUILDS="builds"

  rm -rf ./$OUTBOX/*
  rm -rf ./$LOGS/*
  rm -rf ./$SENT/*
  rm -rf ./$VIRUSES/*
  rm -rf ./$BACTERIA/*
  rm -rf ./$BUILDS/*
}

initMode() {
  echo "-  Initializing the Transfer Tool..."

  if [ ! -x "$(command -v tar)" ]; then
    printf "${BACK_RED} ERROR ${COL_RESET} ${COL_RED}Stopped with 1 error${COL_RESET} ${COL_GREY} ${TIME} ${COL_RESET}\n"
    printf "${BACK_RED} error ${COL_RESET} command unavailable: the tar command is not available on this system and is mandatory for the pipeline."
    exit 22
  fi

  if [ ! -x "$(command -v sftp)" ]; then
    printf "${BACK_RED} ERROR ${COL_RESET} ${COL_RED}Stopped with 1 error${COL_RESET} ${COL_GREY} ${TIME} ${COL_RESET}\n"
    printf "${BACK_RED} error ${COL_RESET} command unavailable: the sftp command is not available on this system and is mandatory for the pipeline.\n"
    printf "${BACK_CYAN} INFO ${COL_RESET} Check out OpenSSH at ${COL_CYAN}https://www.openssh.com/${COL_RESET}"
    exit 22
  fi

  if [ ! -x "$(command -v nc)" ]; then
    printf "${BACK_RED} ERROR ${COL_RESET} ${COL_RED}Stopped with 1 error${COL_RESET} ${COL_GREY} ${TIME} ${COL_RESET}\n"
    printf "${BACK_RED} error ${COL_RESET} command unavailable: the nc command is not available on this system and is mandatory for the pipeline.\n"
    printf "${BACK_CYAN} INFO ${COL_RESET} Check out Netcat at ${COL_CYAN}http://netcat.sourceforge.net/${COL_RESET}"
    exit 22
  fi

  if [ ! -x "$(command -v gpg)" ]; then
    export PATH=$PATH:/usr/local/bin
    if [ ! -x "$(command -v gpg)" ]; then
      printf "${BACK_RED} ERROR ${COL_RESET} ${COL_RED}Stopped with 1 error${COL_RESET} ${COL_GREY} ${TIME} ${COL_RESET}\n"
      printf "${BACK_RED} error ${COL_RESET} command unavailable: the gpg command is not available on this system and is mandatory for the pipeline.\n"
      printf "${BACK_CYAN} INFO ${COL_RESET} Check out GnuPG at ${COL_CYAN}https://gnupg.org/${COL_RESET}"
      exit 22
    fi
  fi

  chmod +x spsp

  gpg -q --import --fingerprint .pub

  printf "${BACK_GREEN} DONE ${COL_RESET} All commands available\n"
  printf "${BACK_GREEN} DONE ${COL_RESET} SPSP Public key imported\n"
  printf "${BACK_CYAN} INFO ${COL_RESET} Please make sure that the fingerprint: "
  printf "${COL_CYAN}"
  gpg -q --with-colons --import-options show-only --import --fingerprint .pub | awk -F: '$1 == "fpr" {print $10;}' | head -n 1
  printf "${COL_RESET}"
  printf "matches the fingerprint on this page: https://gitlab.sib.swiss/SPSP/transfer-tool/-/wikis/Installation#verify-the-public-key\n"
}

autoMode() {
  START=$(date +%s)
  CURRENTDATE=$(date +"%Y-%m-%d")
  VIRUSES=viruses
  BACTERIA=bacteria
  OUTBOX=".outbox"
  SENT=sent
  LOGS="logs"
  LOGFILE="$LOGS/spsp-$CURRENTDATE.log"
  ERRORLOGFILE="$LOGS/error.log"
  ERRORS=0
  SUCCESS=0

  printf " -  Initializing the automatic mode of the Transfer Tool... "

  if [ ! -d "$OUTBOX" ]; then
    mkdir $OUTBOX
    echo "[$(date +"%T")] local.SUCCESS: $OUTBOX directory was successfully created" >>"$LOGFILE"
  fi

  if [ ! -d "$OUTBOX/$VIRUSES" ]; then
    mkdir -p $OUTBOX/$VIRUSES
    echo "[$(date +"%T")] local.SUCCESS: $OUTBOX/$VIRUSES subfolder was successfully created" >>"$LOGFILE"
  fi

  if [ ! -d "$OUTBOX/$BACTERIA" ]; then
    mkdir -p $OUTBOX/$BACTERIA
    echo "[$(date +"%T")] local.SUCCESS: $OUTBOX/$BACTERIA subfolder was successfully created" >>"$LOGFILE"
  fi

  if [ ! -d "$SENT" ]; then
    mkdir $SENT
  fi

  if [ ! -d "$LOGS" ]; then
    mkdir $LOGS
  fi

  if [ ! -f "$LOGFILE" ]; then
    touch "$LOGFILE"
  fi

  if [ ! -f "$ERRORLOGFILE" ]; then
    touch "$ERRORLOGFILE"
  fi

  printf "${BACK_GREEN} DONE ${COL_RESET}\n"

  printf " -  Testing the connection to the remote server...          "

  STEP_ERRORS=0

  if ! nc -w 1 -z "${HOST}" 22 &>/dev/null; then
    ((STEP_ERRORS = STEP_ERRORS + 1))
    echo "[$(date +"%T")] local.ERROR: ${HOST}:22 is unreachable, please check your connection" >>"$LOGFILE"
    echo "[$(date +"%F %T")] local.ERROR: ${HOST}:22 is unreachable, please check your connection" >>"$ERRORLOGFILE"
  fi

  if [[ "$*" == *--local* ]] || [[ "$*" == *-L* ]]; then
    STEP_ERRORS=0
  fi

  if [[ $STEP_ERRORS > 0 ]]; then
    printf "${BACK_RED} ERROR ${COL_RESET}\n"
    exit 55
  else
    printf "${BACK_GREEN} DONE ${COL_RESET}\n"
  fi

  printf " -  Compressing the viruses and bacteria subfolders...      "

  STEP_ERRORS=0

  cd $VIRUSES

  for DIRECTORY in ./*; do

    if [ -d "$DIRECTORY" ] && [ "$DIRECTORY" != $OUTBOX ] && [ "$DIRECTORY" != $SENT ] && [ "$DIRECTORY" != $LOGS ]; then

      for FILE in "$DIRECTORY"/*; do
        if [[ -f $FILE && $FILE != *.@(fasta|fa|fasta.gz|fa.gz|fasta.xz|fa.xz|fastq|fastq.gz|cram|bam|cram.gz|bam.gz|csv|tsv|csv.gz|tsv.gz|vcf|xls|xlsx) ]]; then
          ((ERRORS = ERRORS + 1))
          ((STEP_ERRORS = STEP_ERRORS + 1))
          echo "[$(date +"%T")] local.ERROR: Unsupported format ($FILE)" >>"../$LOGFILE"
          echo "[$(date +"%F %T")] local.ERROR: Unsupported format ($FILE)" >>"../$ERRORLOGFILE"
        fi
      done

      if ls "$DIRECTORY"/*.fa* 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.*am 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.*sv* 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.vcf 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.xls* 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.*.gz 1>/dev/null 2>&1; then

        if [[ "$*" == *--fake* ]] || [[ "$*" == *-F* ]]; then
          compressFolder "$DIRECTORY" 2>>"../$ERRORLOGFILE"
          if [ -f "$DIRECTORY.tar.gz" ]; then
            echo "[$(date +"%T")] local.SUCCESS: $DIRECTORY has been successfully compress into $DIRECTORY.tar.gz" >>"../$LOGFILE"
          else
            ((ERRORS = ERRORS + 1))
            ((STEP_ERRORS = STEP_ERRORS + 1))
            echo "[$(date +"%T")] local.ERROR: Compression of $DIRECTORY failed" >>"../$LOGFILE"
            echo "[$(date +"%F %T")] local.ERROR: Compression of $DIRECTORY failed" >>"../$ERRORLOGFILE"
          fi
        else
          ARCHIVENAME=$(date +"%Y%m%d%H%M")
          mv $DIRECTORY $ARCHIVENAME
          compressFolder "$ARCHIVENAME" 2>>"../$ERRORLOGFILE"
          if [ -f "$ARCHIVENAME.tar.gz" ]; then
            echo "[$(date +"%T")] local.SUCCESS: $ARCHIVENAME has been successfully compress into $DIRECTORY.tar.gz" >>"../$LOGFILE"
          else
            ((ERRORS = ERRORS + 1))
            ((STEP_ERRORS = STEP_ERRORS + 1))
            echo "[$(date +"%T")] local.ERROR: Compression of $ARCHIVENAME failed" >>"../$LOGFILE"
            echo "[$(date +"%F %T")] local.ERROR: Compression of $ARCHIVENAME failed" >>"../$ERRORLOGFILE"
          fi
        fi

        if [[ "$*" == *--fake* ]] || [[ "$*" == *-F* ]]; then
          mv "$DIRECTORY.tar.gz" "../$OUTBOX/$VIRUSES/"
          rm -rf "$DIRECTORY"
          echo "[$(date +"%T")] local.SUCCESS: $DIRECTORY has been successfully removed" >>"../$LOGFILE"
        else
          mv "$ARCHIVENAME.tar.gz" "../$OUTBOX/$VIRUSES/"
          rm -rf "$ARCHIVENAME"
          echo "[$(date +"%T")] local.SUCCESS: $ARCHIVENAME has been successfully removed" >>"../$LOGFILE"
        fi

      else
        ((ERRORS = ERRORS + 1))
        ((STEP_ERRORS = STEP_ERRORS + 1))
        echo "[$(date +"%T")] local.ERROR: Missing required files inside $DIRECTORY of $VIRUSES DIRECTORY" >>"../$LOGFILE"
        echo "[$(date +"%F %T")] local.ERROR: Missing required files inside $DIRECTORY of $VIRUSES DIRECTORY" >>"../$ERRORLOGFILE"
      fi

    fi
  done

  cd ..

  cd $BACTERIA

  for DIRECTORY in ./*; do

    if [ -d "$DIRECTORY" ] && [ "$DIRECTORY" != $OUTBOX ] && [ "$DIRECTORY" != $SENT ] && [ "$DIRECTORY" != $LOGS ]; then

      for FILE in "$DIRECTORY"/*; do
        if [[ -f $FILE && $FILE != *.@(fasta|fa|fasta.gz|fa.gz|fasta.xz|fa.xz|fastq|fastq.gz|cram|bam|cram.gz|bam.gz|csv|tsv|csv.gz|tsv.gz|vcf|xls|xlsx) ]]; then
          ((ERRORS = ERRORS + 1))
          ((STEP_ERRORS = STEP_ERRORS + 1))
          echo "[$(date +"%T")] local.ERROR: Unsupported format ($FILE)" >>"../$LOGFILE"
          echo "[$(date +"%F %T")] local.ERROR: Unsupported format ($FILE)" >>"../$ERRORLOGFILE"
        fi
      done

      if ls "$DIRECTORY"/*.fa* 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.*am 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.*sv* 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.vcf 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.xls* 1>/dev/null 2>&1 || ls "$DIRECTORY"/*.*.gz 1>/dev/null 2>&1; then

        if [[ "$*" == *--fake* ]] || [[ "$*" == *-F* ]]; then
          compressFolder "$DIRECTORY"
          if [ -f "$DIRECTORY.tar.gz" ]; then
            echo "[$(date +"%T")] local.SUCCESS: $DIRECTORY has been successfully compress into $DIRECTORY.tar.gz" >>"../$LOGFILE"
          else
            ((ERRORS = ERRORS + 1))
            ((STEP_ERRORS = STEP_ERRORS + 1))
            echo "[$(date +"%T")] local.ERROR: Compression of $DIRECTORY failed" >>"../$LOGFILE"
            echo "[$(date +"%F %T")] local.ERROR: Compression of $DIRECTORY failed" >>"../$ERRORLOGFILE"
          fi
        else
          ARCHIVENAME=$(date +"%Y%m%d%H%M")
          mv $DIRECTORY $ARCHIVENAME
          compressFolder "$ARCHIVENAME"
          if [ -f "$ARCHIVENAME.tar.gz" ]; then
            echo "[$(date +"%T")] local.SUCCESS: $ARCHIVENAME has been successfully compress into $DIRECTORY.tar.gz" >>"../$LOGFILE"
          else
            ((ERRORS = ERRORS + 1))
            ((STEP_ERRORS = STEP_ERRORS + 1))
            echo "[$(date +"%T")] local.ERROR: Compression of $ARCHIVENAME failed" >>"../$LOGFILE"
            echo "[$(date +"%F %T")] local.ERROR: Compression of $ARCHIVENAME failed" >>"../$ERRORLOGFILE"
          fi
        fi

        if [[ "$*" == *--fake* ]] || [[ "$*" == *-F* ]]; then
          mv "$DIRECTORY.tar.gz" "../$OUTBOX/$BACTERIA/"
          rm -rf "$DIRECTORY"
          echo "[$(date +"%T")] local.SUCCESS: $DIRECTORY has been successfully removed" >>"../$LOGFILE"
        else
          mv "$ARCHIVENAME.tar.gz" "../$OUTBOX/$BACTERIA/"
          rm -rf "$ARCHIVENAME"
          echo "[$(date +"%T")] local.SUCCESS: $ARCHIVENAME has been successfully removed" >>"../$LOGFILE"
        fi

      else
        ((ERRORS = ERRORS + 1))
        ((STEP_ERRORS = STEP_ERRORS + 1))
        echo "[$(date +"%T")] local.ERROR: Missing required files inside $DIRECTORY of $BACTERIA DIRECTORY" >>"../$LOGFILE"
        echo "[$(date +"%F %T")] local.ERROR: Missing required files inside $DIRECTORY of $BACTERIA DIRECTORY" >>"../$ERRORLOGFILE"
      fi
    fi
  done

  cd ..

  if [[ $STEP_ERRORS > 0 ]]; then
    printf "${BACK_RED} ERROR ${COL_RESET}\n"
  else
    printf "${BACK_GREEN} DONE ${COL_RESET}\n"
  fi

  STEP_ERRORS=0

  printf " -  Hashing and encrypting the archives...                  "

  cd $OUTBOX/$VIRUSES

  for FILE in *.*; do
    if [ -f "$FILE" ]; then
      encryptFile "$FILE"
      hashFile "$FILE"

      if [ -f "$FILE.sha256" ]; then
        echo "[$(date +"%T")] local.SUCCESS: $FILE has been successfully hashed into $FILE.sha256" >>"../../$LOGFILE"
      else
        ((ERRORS = ERRORS + 1))
        ((STEP_ERRORS = STEP_ERRORS + 1))
        echo "[$(date +"%T")] local.ERROR: Hashing of $FILE failed" >>"../../$LOGFILE"
        echo "[$(date +"%F %T")] local.ERROR: Hashing of $FILE failed" >>"../../$ERRORLOGFILE"
      fi

      if [ -f "$FILE.gpg" ]; then
        echo "[$(date +"%T")] local.SUCCESS: $FILE has been successfully encrypted into $FILE.gpg" >>"../../$LOGFILE"

      else
        ((ERRORS = ERRORS + 1))
        ((STEP_ERRORS = STEP_ERRORS + 1))
        echo "[$(date +"%T")] local.ERROR: Encryption of $FILE failed" >>"../../$LOGFILE"
        echo "[$(date +"%F %T")] local.ERROR: Encryption of $FILE failed" >>"../../$ERRORLOGFILE"
      fi

      rm -rf "$FILE"

    fi
  done

  cd ../$BACTERIA

  for FILE in *.*; do
    if [ -f "$FILE" ]; then
      encryptFile "$FILE"
      hashFile "$FILE"

      if [ -f "$FILE.sha256" ]; then
        echo "[$(date +"%T")] local.SUCCESS: $FILE has been successfully hashed into $FILE.sha256" >>"../../$LOGFILE"
      else
        ((ERRORS = ERRORS + 1))
        ((STEP_ERRORS = STEP_ERRORS + 1))
        echo "[$(date +"%T")] local.ERROR: Hashing of $FILE failed" >>"../../$LOGFILE"
        echo "[$(date +"%F %T")] local.ERROR: Hashing of $FILE failed" >>"../../$ERRORLOGFILE"
      fi

      if [ -f "$FILE.gpg" ]; then
        echo "[$(date +"%T")] local.SUCCESS: $FILE has been successfully encrypted into $FILE.gpg" >>"../../$LOGFILE"
      else
        ((ERRORS = ERRORS + 1))
        ((STEP_ERRORS = STEP_ERRORS + 1))
        echo "[$(date +"%T")] local.ERROR: Encryption of $FILE failed" >>"../../$LOGFILE"
        echo "[$(date +"%F %T")] local.ERROR: Encryption of $FILE failed" >>"../../$ERRORLOGFILE"
      fi

      rm -rf "$FILE"

    fi
  done

  if [[ $STEP_ERRORS > 0 ]]; then
    printf "${BACK_RED} ERROR ${COL_RESET}\n"
  else
    printf "${BACK_GREEN} DONE ${COL_RESET}\n"
  fi

  STEP_ERRORS=0

  printf " -  Transferring the encrypted archives...                  "

  cd ../$VIRUSES

  for FILE in *.*; do
    if [ -f "$FILE" ]; then
      echo put "$FILE" | sftp -q -b- "${SFTP_URL}/$VIRUSES" 1>/dev/null 2>>"../../$ERRORLOGFILE"
      ((SUCCESS = SUCCESS + 1))
      echo "[$(date +"%T")] local.SUCCESS: $FILE has been successfully transferred to the remote server" >>"../../$LOGFILE"
      if [[ "$*" == *--no-archive* ]] || [[ "$*" == *-NA* ]]; then
        rm -rf "$FILE"
        echo "[$(date +"%T")] local.SUCCESS: --NA activated, $FILE successfully removed" >>"../../$LOGFILE"
      else
        mv "$FILE" ../../$SENT
        echo "[$(date +"%T")] local.SUCCESS: $FILE successfully moved to $SENT folder" >>"../../$LOGFILE"
      fi
    fi
  done

  cd ../$BACTERIA

  for FILE in *.*; do
    if [ -f "$FILE" ]; then
      echo put "$FILE" | sftp -q -b- -o LogLevel=QUIET "${SFTP_URL}/$BACTERIA" 1>/dev/null 2>>"../../$ERRORLOGFILE"
      ((SUCCESS = SUCCESS + 1))
      echo "[$(date +"%T")] local.SUCCESS: $FILE has been successfully transferred to the remote server" >>"../../$LOGFILE"
      if [[ "$*" == *--no-archive* ]] || [[ "$*" == *-NA* ]]; then
        rm -rf "$FILE"
        echo "[$(date +"%T")] local.SUCCESS: --NA activated, $FILE successfully removed" >>"../../$LOGFILE"
      else
        mv "$FILE" ../../$SENT
        echo "[$(date +"%T")] local.SUCCESS: $FILE successfully moved to $SENT folder" >>"../../$LOGFILE"
      fi
    fi
  done

  if [[ $STEP_ERRORS > 0 ]]; then
    printf "${BACK_RED} ERROR ${COL_RESET}\n"
  else
    printf "${BACK_GREEN} DONE ${COL_RESET}\n"
  fi

  if [[ $SUCCESS > 0 ]]; then
    printf "\n${BACK_GREEN} DONE ${COL_RESET} Transfer completed. $SUCCESS files has been securely transferred to the secured server.\n\n"
  fi

  if [[ $ERRORS > 0 ]]; then
    printf "${BACK_RED} ERROR ${COL_RESET} ${COL_RED}Completed with $ERRORS error(s)${COL_RESET} ${COL_GREY} ${TIME} ${COL_RESET}\n"
    printf "${BACK_RED} error ${COL_RESET} Error detected: Please check ./$ERRORLOGFILE\n"
    exit 1
  fi

  END=$(date +%s)
  DIFF=$(($END - $START))
  echo "Time: $DIFF s"

}

generateFakeFiles() {
  VIRUSES=viruses
  BACTERIA=bacteria

  if [ ! -d "$VIRUSES/fake-viruses-xlsx" ]; then
    mkdir -p $VIRUSES/fake-viruses-xlsx
  fi

  rm -rf ./$VIRUSES/fake-viruses-xlsx/*

  truncate -s 5M ./$VIRUSES/fake-viruses-xlsx/fake-viruses.xlsx

  if [ ! -d "$VIRUSES/fake-viruses-xls" ]; then
    mkdir -p $VIRUSES/fake-viruses-xls
  fi

  rm -rf ./$VIRUSES/fake-viruses-xls/*

  truncate -s 5M ./$VIRUSES/fake-viruses-xls/fake-viruses.xls

  if [ ! -d "$VIRUSES/fake-viruses-fasta" ]; then
    mkdir -p $VIRUSES/fake-viruses-fasta
  fi

  rm -rf ./$VIRUSES/fake-viruses-fasta/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fasta/fake-viruses.fasta

  if [ ! -d "$VIRUSES/fake-viruses-fa" ]; then
    mkdir -p $VIRUSES/fake-viruses-fa
  fi

  rm -rf ./$VIRUSES/fake-viruses-fa/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fa/fake-viruses.fa

  if [ ! -d "$VIRUSES/fake-viruses-fasta-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-fasta-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-fasta-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fasta-gz/fake-viruses.fasta.gz

  if [ ! -d "$VIRUSES/fake-viruses-fa-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-fa-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-fa-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fa-gz/fake-viruses.fa.gz

  if [ ! -d "$VIRUSES/fake-viruses-fasta-xz" ]; then
    mkdir -p $VIRUSES/fake-viruses-fasta-xz
  fi

  rm -rf ./$VIRUSES/fake-viruses-fasta-xz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fasta-xz/fake-viruses.fasta.xz

  if [ ! -d "$VIRUSES/fake-viruses-fa-xz" ]; then
    mkdir -p $VIRUSES/fake-viruses-fa-xz
  fi

  rm -rf ./$VIRUSES/fake-viruses-fa-xz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fa-xz/fake-viruses.fa.xz

  if [ ! -d "$VIRUSES/fake-viruses-fastq" ]; then
    mkdir -p $VIRUSES/fake-viruses-fastq
  fi

  rm -rf ./$VIRUSES/fake-viruses-fastq/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fastq/fake-viruses.fastq

  if [ ! -d "$VIRUSES/fake-viruses-fastq-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-fastq-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-fastq-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-fastq-gz/fake-viruses.fastq.gz

  if [ ! -d "$VIRUSES/fake-viruses-cram" ]; then
    mkdir -p $VIRUSES/fake-viruses-cram
  fi

  rm -rf ./$VIRUSES/fake-viruses-cram/*

  truncate -s 100M ./$VIRUSES/fake-viruses-cram/fake-viruses.cram

  if [ ! -d "$VIRUSES/fake-viruses-bam" ]; then
    mkdir -p $VIRUSES/fake-viruses-bam
  fi

  rm -rf ./$VIRUSES/fake-viruses-bam/*

  truncate -s 100M ./$VIRUSES/fake-viruses-bam/fake-viruses.bam

  if [ ! -d "$VIRUSES/fake-viruses-cram-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-cram-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-cram-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-cram-gz/fake-viruses.cram.gz

  if [ ! -d "$VIRUSES/fake-viruses-bam-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-bam-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-bam-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-bam-gz/fake-viruses.bam.gz

  if [ ! -d "$VIRUSES/fake-viruses-csv" ]; then
    mkdir -p $VIRUSES/fake-viruses-csv
  fi

  rm -rf ./$VIRUSES/fake-viruses-csv/*

  truncate -s 100M ./$VIRUSES/fake-viruses-csv/fake-viruses.csv

  if [ ! -d "$VIRUSES/fake-viruses-tsv" ]; then
    mkdir -p $VIRUSES/fake-viruses-tsv
  fi

  rm -rf ./$VIRUSES/fake-viruses-tsv/*

  truncate -s 100M ./$VIRUSES/fake-viruses-tsv/fake-viruses.tsv

  if [ ! -d "$VIRUSES/fake-viruses-csv-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-csv-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-csv-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-csv-gz/fake-viruses.csv.gz

  if [ ! -d "$VIRUSES/fake-viruses-tsv-gz" ]; then
    mkdir -p $VIRUSES/fake-viruses-tsv-gz
  fi

  rm -rf ./$VIRUSES/fake-viruses-tsv-gz/*

  truncate -s 100M ./$VIRUSES/fake-viruses-tsv-gz/fake-viruses.tsv.gz

  if [ ! -d "$VIRUSES/fake-viruses-vcf" ]; then
    mkdir -p $VIRUSES/fake-viruses-vcf
  fi

  rm -rf ./$VIRUSES/fake-viruses-vcf/*

  truncate -s 100M ./$VIRUSES/fake-viruses-vcf/fake-viruses.vcf

  if [ ! -d "$BACTERIA/fake-bacteria-xlsx" ]; then
    mkdir -p $BACTERIA/fake-bacteria-xlsx
  fi

  rm -rf ./$BACTERIA/fake-bacteria-xlsx/*

  truncate -s 5M ./$BACTERIA/fake-bacteria-xlsx/fake-bacteria.xlsx

  if [ ! -d "$BACTERIA/fake-bacteria-xls" ]; then
    mkdir -p $BACTERIA/fake-bacteria-xls
  fi

  rm -rf ./$BACTERIA/fake-bacteria-xls/*

  truncate -s 5M ./$BACTERIA/fake-bacteria-xls/fake-bacteria.xls

  if [ ! -d "$BACTERIA/fake-bacteria-fasta" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fasta
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fasta/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fasta/fake-bacteria.fasta

  if [ ! -d "$BACTERIA/fake-bacteria-fa" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fa
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fa/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fa/fake-bacteria.fa

  if [ ! -d "$BACTERIA/fake-bacteria-fasta-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fasta-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fasta-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fasta-gz/fake-bacteria.fasta.gz

  if [ ! -d "$BACTERIA/fake-bacteria-fa-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fa-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fa-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fa-gz/fake-bacteria.fa.gz

  if [ ! -d "$BACTERIA/fake-bacteria-fasta-xz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fasta-xz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fasta-xz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fasta-xz/fake-bacteria.fasta.xz

  if [ ! -d "$BACTERIA/fake-bacteria-fa-xz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fa-xz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fa-xz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fa-xz/fake-bacteria.fa.xz

  if [ ! -d "$BACTERIA/fake-bacteria-fastq" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fastq
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fastq/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fastq/fake-bacteria.fastq

  if [ ! -d "$BACTERIA/fake-bacteria-fastq-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-fastq-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-fastq-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-fastq-gz/fake-bacteria.fastq.gz

  if [ ! -d "$BACTERIA/fake-bacteria-cram" ]; then
    mkdir -p $BACTERIA/fake-bacteria-cram
  fi

  rm -rf ./$BACTERIA/fake-bacteria-cram/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-cram/fake-bacteria.cram

  if [ ! -d "$BACTERIA/fake-bacteria-bam" ]; then
    mkdir -p $BACTERIA/fake-bacteria-bam
  fi

  rm -rf ./$BACTERIA/fake-bacteria-bam/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-bam/fake-bacteria.bam

  if [ ! -d "$BACTERIA/fake-bacteria-cram-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-cram-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-cram-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-cram-gz/fake-bacteria.cram.gz

  if [ ! -d "$BACTERIA/fake-bacteria-bam-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-bam-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-bam-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-bam-gz/fake-bacteria.bam.gz

  if [ ! -d "$BACTERIA/fake-bacteria-csv" ]; then
    mkdir -p $BACTERIA/fake-bacteria-csv
  fi

  rm -rf ./$BACTERIA/fake-bacteria-csv/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-csv/fake-bacteria.csv

  if [ ! -d "$BACTERIA/fake-bacteria-tsv" ]; then
    mkdir -p $BACTERIA/fake-bacteria-tsv
  fi

  rm -rf ./$BACTERIA/fake-bacteria-tsv/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-tsv/fake-bacteria.tsv

  if [ ! -d "$BACTERIA/fake-bacteria-csv-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-csv-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-csv-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-csv-gz/fake-bacteria.csv.gz

  if [ ! -d "$BACTERIA/fake-bacteria-tsv-gz" ]; then
    mkdir -p $BACTERIA/fake-bacteria-tsv-gz
  fi

  rm -rf ./$BACTERIA/fake-bacteria-tsv-gz/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-tsv-gz/fake-bacteria.tsv.gz

  if [ ! -d "$BACTERIA/fake-bacteria-vcf" ]; then
    mkdir -p $BACTERIA/fake-bacteria-vcf
  fi

  rm -rf ./$BACTERIA/fake-bacteria-vcf/*

  truncate -s 100M ./$BACTERIA/fake-bacteria-vcf/fake-bacteria.vcf

  autoMode --fake --no-archive

  printf "\n${BACK_GREEN} DONE ${COL_RESET} Test completed. Everything went smoothly.\n\n"

  exit 0
}

# If we pass any arguments...
if [ $# -gt 0 ]; then

  if [[ "$*" == *--without-env* ]] || [[ "$*" == *-W* ]]; then
    echo " -  Ignoring .env file..."
  else
    if [ -f .env ]; then
      source .env
    else
      echo " -  Creating a new .env file..."
      answer=false
      while [ "$answer" = false ]; do
        read -r -p "Please type laboratory/institution identifier: " identifier
        read -r -p "Is $identifier correct?[y/n] " -n 1
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          echo "ID=$identifier" >.env
          echo 'HOST=spsp.sib.swiss' >>.env
          echo 'SFTP_URL=${ID}@${HOST}:data' >>.env
          answer=true
        else
          echo ""
        fi
      done
      source .env

    fi
  fi

  if [ "$1" == "--version" ] || [ "$1" == "-V" ] || [ "$1" == "version" ]; then
    showVersion
    exit 0
  fi

  if [ "$1" == "--help" ] || [ "$1" == "-H" ] || [ "$1" == "help" ]; then
    showHelp
    exit 0
  fi

  if [ "$1" == "init" ]; then
    initMode
    exit 0

  # Edit .env file to set SFTP_URL and PROFILE
  elif [ "$1" == "auto" ]; then
    shift 1
    autoMode "$@"
    exit 0

  elif [ "$1" == "test" ]; then
    generateFakeFiles
    exit 0

  elif [ "$1" == "cleanup" ]; then
    cleanup
    exit 0

  else
    message="Command does not exist, please check the help\n ${COL_LGREEN}./spsp help${COL_RESET}"
    printf "$message\n"
    exit 22
  fi
fi
