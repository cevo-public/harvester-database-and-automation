name: Docker

on:
  push:
    branches:
      - public
  schedule:
    - cron: '0 7 */2 * *'

env:
  IMAGE_NAME: ghcr.io/cevo-public/harvester


jobs:

  bag_meldeformular_dashboard_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/bag_meldeformular_dashboard_importer/database
          docker build -t $IMAGE_NAME:bag_meldeformular_dashboard_importer automation/bag_meldeformular_dashboard_importer/
          docker push $IMAGE_NAME:bag_meldeformular_dashboard_importer
          
  bag_meldeformular_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/bag_meldeformular_importer/database
          docker build -t $IMAGE_NAME:bag_meldeformular_importer automation/bag_meldeformular_importer/
          docker push $IMAGE_NAME:bag_meldeformular_importer

  consensus_sequence_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/consensus_sequence_importer/database
          docker build -t $IMAGE_NAME:consensus_sequence_importer automation/consensus_sequence_importer/
          docker push $IMAGE_NAME:consensus_sequence_importer

  nextclade_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/nextclade_importer/database
          docker build -t $IMAGE_NAME:nextclade_importer automation/nextclade_importer/
          docker push $IMAGE_NAME:nextclade_importer

  pangolin_lineage_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cd automation/pangolin_lineage_importer
          git clone https://github.com/cov-lineages/pangolin.git
          cd ../..
          cp -r database automation/pangolin_lineage_importer/database
          docker build -t $IMAGE_NAME:pangolin_lineage_importer automation/pangolin_lineage_importer/
          docker push $IMAGE_NAME:pangolin_lineage_importer

  polybox_updater:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/polybox_updater/database
          docker build -t $IMAGE_NAME:polybox_updater automation/polybox_updater/
          docker push $IMAGE_NAME:polybox_updater

  owid_global_cases_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/owid_global_cases_importer/database
          docker build -t $IMAGE_NAME:owid_global_cases_importer automation/owid_global_cases_importer/
          docker push $IMAGE_NAME:owid_global_cases_importer

  spsp_transferer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cd automation/spsp_transferer
          git clone https://gitlab.sib.swiss/SPSP/transfer-tool.git
          cd ../..
          cp -r database automation/spsp_transferer/database
          docker build -t $IMAGE_NAME:spsp_transferer automation/spsp_transferer/
          docker push $IMAGE_NAME:spsp_transferer

  gisaid_api_importer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/gisaid_api_importer/database
          docker build -t $IMAGE_NAME:gisaid_api_importer automation/gisaid_api_importer/
          docker push $IMAGE_NAME:gisaid_api_importer

  java:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/java/database
          docker build -t $IMAGE_NAME:java automation/java/
          docker push $IMAGE_NAME:java

  viollier_metadata_receiver:
    needs: java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to Github Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Add tags and push
        run: |
          cp -r database automation/viollier_metadata_receiver/database
          docker build -t $IMAGE_NAME:viollier_metadata_receiver automation/viollier_metadata_receiver/
          docker push $IMAGE_NAME:viollier_metadata_receiver
